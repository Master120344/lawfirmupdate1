document.addEventListener('DOMContentLoaded', () => {
    const carouselWrapper = document.querySelector('.testimonial-carousel-wrapper');
    if (!carouselWrapper) {
        // console.log("Google Reviews Carousel Wrapper not found.");
        return;
    }

    const carousel = carouselWrapper.querySelector('.testimonial-carousel');
    const items = carousel ? carousel.querySelectorAll('.testimonial-item') : null;
    const prevButton = carouselWrapper.querySelector('.carousel-control.prev');
    const nextButton = carouselWrapper.querySelector('.carousel-control.next');
    const dotsContainer = carouselWrapper.querySelector('.carousel-dots');

    if (!carousel || !items || !dotsContainer) { // Removed items.length === 0 from here, handled below
        // console.log("Essential Google Reviews Carousel elements missing.");
        if(prevButton) prevButton.style.display = 'none';
        if(nextButton) nextButton.style.display = 'none';
        if(dotsContainer) dotsContainer.style.display = 'none';
        // If carousel element itself is missing, or dots container, can't proceed.
        if (!carousel || !dotsContainer) {
            if(carouselWrapper) carouselWrapper.style.display = 'none';
            return;
        }
    }

    // If there are no items, hide the entire carousel wrapper and controls.
    if (!items || items.length === 0) {
        // console.log("No testimonial items found.");
        if(carouselWrapper) carouselWrapper.style.display = 'none';
        if(prevButton) prevButton.style.display = 'none';
        if(nextButton) nextButton.style.display = 'none';
        if(dotsContainer) dotsContainer.style.display = 'none';
        return; // Stop further carousel logic
    }
    
    // If only one item, hide prev/next buttons and dots. Autoplay won't run.
    // Show arrows only if items > 1
    if (items.length <= 1) {
        if(prevButton) prevButton.style.display = 'none';
        if(nextButton) nextButton.style.display = 'none';
        if(dotsContainer) dotsContainer.style.display = 'none';
    } else {
        // Ensure buttons are visible if JS is controlling them (they are hidden by CSS default)
        // CSS can also handle this with :hover on wrapper
        // if(prevButton) prevButton.style.display = 'flex';
        // if(nextButton) nextButton.style.display = 'flex';
    }


    let currentIndex = 0;
    const totalItems = items.length;
    let autoPlayInterval;
    const autoPlayDelay = 7000; // 7 seconds

    function updateCarousel() {
        if (carousel) {
            carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
        updateDots();
    }

    function updateDots() {
        if (!dotsContainer) return;
        dotsContainer.innerHTML = ''; 
        if (totalItems <= 1) { // Don't show dots for 0 or 1 item
            dotsContainer.style.display = 'none';
            return;
        }
        dotsContainer.style.display = 'block'; // Ensure visible if items > 1

        for (let i = 0; i < totalItems; i++) {
            const dot = document.createElement('button');
            dot.classList.add('carousel-dot');
            if (i === currentIndex) {
                dot.classList.add('active');
            }
            dot.setAttribute('aria-label', `Go to review ${i + 1}`);
            dot.addEventListener('click', () => {
                currentIndex = i;
                updateCarousel();
                resetAutoPlay();
            });
            dotsContainer.appendChild(dot);
        }
    }

    function showNext() {
        currentIndex = (currentIndex + 1) % totalItems;
        updateCarousel();
    }

    function showPrev() {
        currentIndex = (currentIndex - 1 + totalItems) % totalItems;
        updateCarousel();
    }

    function startAutoPlay() {
        stopAutoPlay(); 
        if (totalItems > 1) {
             autoPlayInterval = setInterval(showNext, autoPlayDelay);
        }
    }

    function stopAutoPlay() {
        clearInterval(autoPlayInterval);
    }

    function resetAutoPlay() {
        if (totalItems > 1) { 
            stopAutoPlay();
            startAutoPlay();
        }
    }

    if (nextButton) {
        nextButton.addEventListener('click', () => {
            showNext();
            resetAutoPlay();
        });
    }
    if (prevButton) {
        prevButton.addEventListener('click', () => {
            showPrev();
            resetAutoPlay();
        });
    }

    updateCarousel(); 
    if (totalItems > 1) {
        startAutoPlay();
        carouselWrapper.addEventListener('mouseenter', stopAutoPlay);
        carouselWrapper.addEventListener('mouseleave', startAutoPlay);
        carouselWrapper.addEventListener('focusin', stopAutoPlay); 
        carouselWrapper.addEventListener('focusout', startAutoPlay);
    }
});

window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
        const domContentLoadedEvent = new Event('DOMContentLoaded');
        document.dispatchEvent(domContentLoadedEvent);
    }
});